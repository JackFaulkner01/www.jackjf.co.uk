<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jack Faulkner: Portfolio</title>
	<link rel="stylesheet" type="text/css" href="/styles/portfolio.css?version=27">

	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

	<script>
		var navDiv, ulliaHome, ulliaProjects, ulliaContact, ulliaCV;

		// Sets up element references when page loaded (so null references aren't made)
		window.onload = function() {

			navDiv = document.getElementById("navDiv");
			ulliaHome = document.getElementById("ulliaHome");
			ulliaProjects = document.getElementById("ulliaProjects");
			ulliaContact = document.getElementById("ulliaContact");
			ulliaCV = document.getElementById("ulliaCV");

			if (window.pageYOffset > 56) {
				
				navDiv.classList.add("stickyBack");
				ulliaHome.classList.add("stickyFront");
				ulliaProjects.classList.add("stickyFront");
				ulliaContact.classList.add("stickyFront");
				ulliaCV.classList.add("stickyFront");
			}
		}

		// Add the css sticky class to change the background color of navDiv when scrolled
		window.onscroll = function() {

			if (window.pageYOffset > 56) {
				
				navDiv.classList.add("stickyBack");
				ulliaHome.classList.add("stickyFront");
				ulliaProjects.classList.add("stickyFront");
				ulliaContact.classList.add("stickyFront");
				ulliaCV.classList.add("stickyFront");
			} else {
			
				navDiv.classList.remove("stickyBack");
				ulliaHome.classList.remove("stickyFront");
				ulliaProjects.classList.remove("stickyFront");
				ulliaContact.classList.remove("stickyFront");
				ulliaCV.classList.remove("stickyFront");
			}
		};

		function setMargin() {

			var height = $("#showcaseImage").css("height");
			$("#profile").css("margin-top", Number(height.slice(0, -2)) - 128 + "px");
		}

		$(window).resize(function() {

			var height = $("#showcaseImage").css("height");
			$("#profile").css("margin-top", Number(height.slice(0, -2)) - 128 + "px");
		});

	</script> 
</head>

<body id="home">
	<div id="navDiv">
		<nav>
			<ul id="navUl">
				<li class="navUlLi"><a id="ulliaHome" href="#home">Home</a></li>
				<li class="navUlLi"><a id="ulliaProjects" href="#projects">Projects</a></li>
				<li class="navUlLi"><a id="ulliaContact" href="#contact">Contact</a></li>
				<li class="navUlLi"><a id="ulliaCV" href="cv">CV</a></li>
			</ul>
		</nav>
	</div>

	<div id="showcase">
		<img id="showcaseImage" src="/images/codeGrey.png" alt="Grey shapes wallpaper" onload="setMargin()" />

		<div id="showcaseDiv">
			<p id="showcaseHead">
				Jack Faulkner
			</p>
			<p id="showcaseText">
				Self-learning Software Engineering.
			</p>
		</div>

		<div id="findOutMore">
			<a id="more" href="#profile">More</a>
			<a href="#profile">
				<img id="moreImage" src="/images/whiteDownArrow.png" alt="Down arrow" />
			</a>
		</div>
	</div>

	<div id="profile">
		<p class="profileHead generalWidth">
			Profile
		</p>
		<p class="profileText generalWidth">
			I am a Software Engineer with experience in developing software solutions across the full-stack of software development. My strong analytical and problem-solving skills, combined with my passion for coding, enable me to contribute to the success of a project. My determination and passion is shown in my success of independently learning to code in languages such as C, C# (ASP.NET Core) and Java (Android).
		</p>
		<p class="profileText generalWidth">
			My curiousity in engineering and how things work is not limited to just making software. I've had great fun exploring IoT devices, using IFTTT with smart devices and mobile apps to create custom functionality between smart lights and other IoT devices in my home. Privacy and security is another subject I give some attention to, with it being both an interesting hobby and increasingly important in this digital age.
		</p>
		<p class="profileText generalWidth">
			Personal finance also became a big interest of mine over 4 years ago when I started researching financial markets and investing. This led me to focusing my dissertation on generating investment strategies and analysing their performance in the stock market. Researching personal finance and investing also sparked my curiousity into cryptocurrencies and how they allow decentralised transactions.
		</p>
		<p class="profileText generalWidth">
			To read more about me including my professional experience check out <a id="cvLink" href="cv">my CV</a>.
		</p>
	</div>

	<div id="projects">
		<p class="projectsHead generalWidth">
			Projects
		</p>

		<p class="projectsSubHead generalWidth">
			Core Estate / C#
		</p>
		<p class="projectsSubGrey generalWidth">
			ASP.NET Core Web App
		</p>
		<div class="generalWidth">
			<p class="projectsText">
				Core Estate is a simple real estate web app and its my first C# ASP.NET Core project. After spending a few weeks learning to develop C# ASP.NET Core web apps I decided to put my skills to the test and create a real world application.<br /><br />
				Click here to try <a target="_blank" href="https://www.jackjf.co.uk:4443/" class="projectsLink">Core Estate</a>.<br /><br />
				Or check out the <a target="_blank" href="https://github.com/JackFaulkner01/CoreEstate" class="projectsLink">Core Estate GitHub repo</a>.
			</p>
			<p class="projectsText">
				Here's a break down of my approach to creating Core Estate:<br />
				&#8226; Generate project files and configure the app for authorization and authentication.<br />
				&#8226; Create WebUser model to extend IdentityUser and the AspNetUsers table.<br />
				&#8226; Create ForSaleProperty and ToRentProperty models.<br />
				&#8226; Generate Razor pages for CRUD operations.<br />
				&#8226; Create manage pages for properties and restrict them to users with PropertyManager role.<br />
				&#8226; Create PropertyViewing model.<br />
				&#8226; Create request viewing page and manage viewings page.<br />
				&#8226; Create page to list users viewings and page for property managers to confirm viewings.<br />
				&#8226; Update display annotations for model data.<br />
				&#8226; Create PropertyPhoto model and API to upload photos for a property.<br />
				&#8226; Add PropertyPhotos carousel to the property details pages.<br />
				&#8226; Update property descriptions layout.<br />
				&#8226; Update delete handlers on property pages to remove photos for that property.<br />
				&#8226; Move and update viewings button to the right side of the property details pages.<br />
				&#8226; Update property description inputs to textarea elements.<br />
				&#8226; Update PropertyPhotos API to upload multiple files.<br />
				&#8226; Update layout and styling for property index and details pages.<br />
				&#8226; Move property cards into shared views.<br />
				&#8226; Update property pages and site root to use property card views.<br />
				&#8226; Update media queries and bootstrap breakpoints used in pages.<br />
				&#8226; Add filter by address to property pages.<br />
				&#8226; Add sort options to property pages.<br />
			</p>
		</div>

		<div class="spacerThin generalWidth">
		</div>

		<p class="projectsSubHead generalWidth">
			Portfolio / Node.js
		</p>
		<p class="projectsSubGrey generalWidth">
			Website
		</p>
		<div class="generalWidth">
			<p class="projectsText">
				This website itself is also one of my projects. Rather than simply make a word document to present these projects, I thought producing a website dedicated to showcasing the projects I have worked on would better demonstrate the quality of software I am able to develop. Over the past few years this website has gone through several major changes.
			</p>
			<p class="projectsText">
				At first, I used a WAMP server both for my portfolio and as the server for any of my projects. This proved to be reasonably unstable and was limited to only being accessible on the server's local network.
			</p>
			<p class="projectsText">
				This changed when I researched ways to setup a home server without putting my local network at risk. From that I found Dataplicity, a service to setup a Raspberry Pi using Nginx that connects via a secure HTTPS connection to their servers. Everything was then served from the Raspberry Pi using PHP.
			</p> 
			<p class="projectsText">
				I then decided to learn Node.js and while doing so I migrated my portfolio website to Heroku which offered much better performance.
			</p>
			<p class="projectsText">
				Now this website is hosted on a Linode server which I manage myself. My portfolio is served using Nginx as a reverse proxy for the Node.js app.
			</p>
		</div>

		<div class="spacerThin generalWidth">
		</div>

		<p class="projectsSubHead generalWidth">
			JFinance / Java
		</p>
		<p class="projectsSubGrey generalWidth">
			Android App
		</p>
		<div class="imageWidth">
			<p class="projectsText">
				JFinance is an application written to provide it's user base a way of viewing all their purchases, bills, and incoming money from a single place. I made JFinance, or Jack's Finance, to give myself the opportunity to view all of my finances in a central app. This includes bank accounts, cash or smaller budgets set aside for a specific purpose. At its core, the app works by having the user input all their transactions relating a pot, it then shows a transcript of these transactions for each pot as well as an overview of all of the users pots with a total sum and pie chart displaying the pots data.
			</p>
			<p class="projectsText">
				JFinance is connected to a database but also downloads and stores the users data on their device for use offline when internet connectivity is limited. Then uploading any changes again once internet connectivity is restored. Additionally, JFinance was the first time I used version control, specifically GitHub, for one of my personal projects, as I had started learning to use Git for a group project at university.
			</p>
		</div>
		<img class="projectImage" src="/images/screenshotJFinance.jpg" alt="Screenshot of JFinance app">

		<div class="spacerThin generalWidth">
		</div>

		<p class="projectsSubHead generalWidth">
			JTetris / Java
		</p>
		<p class="projectsSubGrey generalWidth">
			Android App
		</p>
		<div class="imageWidth">
			<p class="projectsText">
				JTetris is my own take on the game Tetris and is controlled in the same way as the actual game. The user can move the shape side to side by touching and moving on the screen, rotate the shape with a tap, and swipe down to quickly drop the shape. When a line is completed that line disappears and all of the settled shapes drop down a layer. The game ends once the board is full and the users score shows how well they have done. Each shape is made up using individual squares as this allows for the shape to be easily broken down when completed layers start disappearing.
			</p>
			<p class="projectsText">
				As JTetris was made using Android Studio, the input for the game works by tracking the users touch input, manipulating the falling shape based on certain conditions. As a result of this the game does not have a particularly smooth response to the user swiping down and the falling shape sometimes drops in the wrong location. Idealy, I would have chosen a game engine to develop JTetris on but I wanted to make it a quick project, it took just 2 days, to get back into the flow of coding.
			</p>
		</div>
		<img class="projectImage" src="/images/screenshotJTetris.jpg" alt="Screenshot of JTetris app">

		<div class="spacerThin generalWidth">
		</div>

		<p class="projectsSubHead generalWidth">
			JIM / Java
		</p>
		<p class="projectsSubGrey generalWidth">
			Android App
		</p>
		<div class="imageWidth">
			<p class="projectsText">
				JIM or Jack's Instant Messaging, was an app I originally developed in about 2018 but this old version of the app was riddled with bugs, unpleasant design and an unstable backend. For those reasons this updated version of JIM had a solid focus on reliable code with a modern UI design. I took all the core ideas from the old JIM but implemented them in a much more comprehensive manner. A major number of the features are enabled by connecting to the server, because it's an instant messaging application. This meant that error checking for each communication between a user and the server had to be remarkably sophisticated in order to give a great user experience when issues inevitably arise.
			</p>
			<p class="projectsText">
				Unlike my first attempt at an instant messaging app, this iteration of JIM updates in real time when a user is on the app to deliver messages promptly. JIM also sends notifications in a timely manner for every new message a user receives. In the beginning of implementing JIM the backend had been written in PHP which was working well until I came to adding real time notifications. At this point I discovered no way to achieve such functionality in PHP meaning I decided to migrate over to Node.js for this portion of the project. In doing so I discovered that Node.js in conjunction with the ExpressJS framework provided a more flexible way of responding to requests. As a result I refactored the code based for the rest of the project and migrated the whole server-side functionality to work in Node.js.
			</p>
			<img id="jimNotificationImage" src="/images/screenshotJIMNotification.jpg" alt="Screenshot of JIM notification">
		</div>
		<img class="projectImage" src="/images/screenshotJIM.jpg" alt="Screenshot of JIM app">

		<div class="spacerThin generalWidth">
		</div>

		<p class="projectsSubHead generalWidth">
			Noughts & Crosses / Kotlin
		</p>
		<p class="projectsSubGrey generalWidth">
			Android App
		</p>
		<div class="imageWidth">
			<p class="projectsText">
				Noughts & Crosses is, as the title suggests, a noughts and crosses game where players take it in turns to place a colour, in this case, and the first to get three of their colour in a row, wins. It is the first Android app I have made to include an AI as the other player, the blue player, is an AI algorithm. The AI uses a minimax algorithm adopted for the purpose of noughts and crosses. Minimax was not a new concept to me as I had tried to use it previously with little success as I hadn't taken the time to properly understand the theory behind it, but this time I had no issues implementing the decision rules.
			</p>
			<p class="projectsText">
				Additionally to it being the first AI Android app, it is also the first proper project I have written in Kotlin. I thought that something as simple as the noughts and crosses game would be a great introduction app to code in Kotlin. Overall the transition from Java to Kotlin was smooth, definitely being assisted by the handful of some Koltin programs I had experimented with previously.
			</p>
		</div>
		<img class="projectImage" src="/images/screenshotJNoughts&Crosses.jpg" alt="Screenshot of JNoughts&Crosses app">
		
		<div class="spacerThin generalWidth">
		</div>

		<p class="projectsSubHead generalWidth">
			Number Recognition / Java
		</p>
		<p class="projectsSubGrey generalWidth">
			Program & Android App
		</p>
		<div class="imageWidth">
			<p class="projectsText">
				The Number Recognition app implements a trained neural netowrk that I wrote in another program which achieves 96% accuracy on the testing data. Using a trained network for the purpose of the app made the most sense as training the network on the users device would take too long and appear to be extremely boring. The app works by loading the saved biases and weights from a previously trained neural network into a cut down version of the network that can be used to test the biases and weights on the fly. Using this trained network substitue allows the app to either cycle through a list of testing data, predicting each one as it goes, or get the user to draw a digit on screen and predict the number drawn.
			</p>
			<p class="projectsText">
				The Number Recognition program implements a network that is fed a list of input data with a list of labels relating to the correct prediction for that input data. In the program the hidden layers, number of epochs, mini batch size and learning rate can all be altered before execution, each giving a different level of accuracy depending on their value. All of the code is written in Java and the network I wrote by watching a series of YouTube videos on neural networks along side searching the web for how to implement the different calculations and equations. Luckily, as all of the data is stored in matrices, I did some work on matrices in college and matrix manipulation in greater detail at university. The YouTube series is by 3Blue1Brown explaining each component of a the neural network and how they work together as a whole.
			</p>
		</div>
		<img class="projectImage" src="/images/screenshotNumberRecognition.jpg" alt="Screenshot of NumberRecognition app">

		<div class="spacerThin generalWidth">
		</div>
		
		<p class="projectsSubHead generalWidth">
			JSnake / Java & Kotlin
		</p>
		<p class="projectsSubGrey generalWidth">
			Program & Android App
		</p>
		<div class="imageWidth">
			<p class="projectsText">
				JSnake is another project I've made multiple variations of starting with a Java console program. This console JSnake was a basic snake game made a while back, maybe the end of 2016, as I was starting to move into solving more complex problem. The next iteration of JSnake was an Android app written in Java made at some point in 2017 and again was just the basic snake but with an appealing UI as opposed to the console game. The final iteration of JSnake is this version, the Android app written in Kotlin in August 2020. It includes an AI mode on top of the basic game. The AI mode has 3 different setting, each one implementing a different AI alogrithm.
			</p>
			<p class="projectsText">
				This last version of JSnake has later, after the Number Recognition project, been modified to add a machine learning neural netowrk feature. JSnake now includes a similar network to the Number Recognition program designed for the snake game. The network can be used to visualise how machines can learn over time, by altering their behaviour based upon what goes right or what goes wrong during a period of training. Once turned on a user can modify the batch size and hidden layers used by the network, giving a fluctuation in performance.
			</p>
		</div>
		<img class="projectImage" src="/images/screenshotJSnake.jpg" alt="Screenshot of JSnake app">
	</div>

	<div id="contact">
		
		<p class="contactHead generalWidth">
			Contact
		</p>

		<p class="contactSubHead generalWidth">
			Email
		</p>
		<p class="contactText generalWidth">
			jackjoshua.faulkner@gmail.com
		</p>

		<div class="spacer generalWidth">
		</div>

		<p class="contactSubHead generalWidth">
			GitHub
		</p>
		<a id="githubLink" target="_blank" href="https://github.com/JackFaulkner01"><img id="githubLogo" src="/images/githubLogo.jpg" alt="GitHub Logo"></a>

	</div>

</body>
</html>
